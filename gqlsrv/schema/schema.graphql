schema {
  query: Query
  mutation: Mutation
}
type Query {
  hello(name: String!): String!
  User(id: String): User
  allUsers: [User]

  allTimer(filter: AllTimerFilter!): [Timer]
  runningTimer: Timer
  getTimer(id: String): Timer

  getProject(id: String): Project
  allProjects: [Project]

  getClient(id: String): Client
  allClients: [Client]
}

type Mutation {
  createUser(user: UserInput!): String
  createTimer(t: CreateTimerInput!): Timer
  startTimer(timerId: String!): Timer
  stopTimer(timerId: String!): Timer
  deleteTimer(timerId: String!): Timer
  updateTimer(t: TimerInput!): Timer

  createProject(p: ProjectInput!): Project
  updateProject(p: ProjectInput!): Project
  deleteProject(projectId: String!): Project

  createClient(c: ClientInput!): Client
  updateClient(c: ClientInput!): Client
  deleteClient(clientId: String!): Client
}

type User {
  id: String
  name: String
  email: String
}
input UserInput {
  name: String
  email: String
  password: String
}

input AllTimerFilter {
  dayrange: String
}

input CreateTimerInput {
  description: String
  project: String
}
input TimerInput {
  id: String
  name: String
  description: String
  teammember: String
  client: String
  project: String
  tags: String
  elapsedSeconds: Int
  timerStart: String
  timerEnd: String
  isRunning: Boolean
  isBilled: Boolean
}

type Timer {
  id: String
  name: String
  description: String
  teammember: String
  client: Client
  project: Project
  tags: String
  elapsedSeconds: Int
  timerStart: String
  timerEnd: String
  isRunning: Boolean
  isBilled: Boolean
}

input ProjectInput {
  id: String
  name: String
  description: String
  team: String
  client: String
  status: String
}
type Project {
  id: String
  name: String
  description: String
  team: String
  client: Client
  status: String
}

input ClientInput {
  id: String
  description: String
  name: String
  address: String
}

type Client {
  id: String
  description: String
  name: String
  address: String
}
