// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/obiwan007/usersrv/clientsrv/api/storage/ent/client"
	"github.com/obiwan007/usersrv/clientsrv/api/storage/ent/predicate"
)

// ClientUpdate is the builder for updating Client entities.
type ClientUpdate struct {
	config
	hooks      []Hook
	mutation   *ClientMutation
	predicates []predicate.Client
}

// Where adds a new predicate for the builder.
func (cu *ClientUpdate) Where(ps ...predicate.Client) *ClientUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetDescription sets the description field.
func (cu *ClientUpdate) SetDescription(s string) *ClientUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the description field if the given value is not nil.
func (cu *ClientUpdate) SetNillableDescription(s *string) *ClientUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// SetName sets the name field.
func (cu *ClientUpdate) SetName(s string) *ClientUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the name field if the given value is not nil.
func (cu *ClientUpdate) SetNillableName(s *string) *ClientUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetAddress sets the address field.
func (cu *ClientUpdate) SetAddress(s string) *ClientUpdate {
	cu.mutation.SetAddress(s)
	return cu
}

// SetNillableAddress sets the address field if the given value is not nil.
func (cu *ClientUpdate) SetNillableAddress(s *string) *ClientUpdate {
	if s != nil {
		cu.SetAddress(*s)
	}
	return cu
}

// ClearAddress clears the value of address.
func (cu *ClientUpdate) ClearAddress() *ClientUpdate {
	cu.mutation.ClearAddress()
	return cu
}

// SetUserid sets the userid field.
func (cu *ClientUpdate) SetUserid(s string) *ClientUpdate {
	cu.mutation.SetUserid(s)
	return cu
}

// SetNillableUserid sets the userid field if the given value is not nil.
func (cu *ClientUpdate) SetNillableUserid(s *string) *ClientUpdate {
	if s != nil {
		cu.SetUserid(*s)
	}
	return cu
}

// ClearUserid clears the value of userid.
func (cu *ClientUpdate) ClearUserid() *ClientUpdate {
	cu.mutation.ClearUserid()
	return cu
}

// SetMandantid sets the mandantid field.
func (cu *ClientUpdate) SetMandantid(s string) *ClientUpdate {
	cu.mutation.SetMandantid(s)
	return cu
}

// SetNillableMandantid sets the mandantid field if the given value is not nil.
func (cu *ClientUpdate) SetNillableMandantid(s *string) *ClientUpdate {
	if s != nil {
		cu.SetMandantid(*s)
	}
	return cu
}

// ClearMandantid clears the value of mandantid.
func (cu *ClientUpdate) ClearMandantid() *ClientUpdate {
	cu.mutation.ClearMandantid()
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *ClientUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClientUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClientUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClientUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ClientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   client.Table,
			Columns: client.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: client.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: client.FieldDescription,
		})
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: client.FieldName,
		})
	}
	if value, ok := cu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: client.FieldAddress,
		})
	}
	if cu.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: client.FieldAddress,
		})
	}
	if value, ok := cu.mutation.Userid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: client.FieldUserid,
		})
	}
	if cu.mutation.UseridCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: client.FieldUserid,
		})
	}
	if value, ok := cu.mutation.Mandantid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: client.FieldMandantid,
		})
	}
	if cu.mutation.MandantidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: client.FieldMandantid,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{client.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ClientUpdateOne is the builder for updating a single Client entity.
type ClientUpdateOne struct {
	config
	hooks    []Hook
	mutation *ClientMutation
}

// SetDescription sets the description field.
func (cuo *ClientUpdateOne) SetDescription(s string) *ClientUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the description field if the given value is not nil.
func (cuo *ClientUpdateOne) SetNillableDescription(s *string) *ClientUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// SetName sets the name field.
func (cuo *ClientUpdateOne) SetName(s string) *ClientUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the name field if the given value is not nil.
func (cuo *ClientUpdateOne) SetNillableName(s *string) *ClientUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetAddress sets the address field.
func (cuo *ClientUpdateOne) SetAddress(s string) *ClientUpdateOne {
	cuo.mutation.SetAddress(s)
	return cuo
}

// SetNillableAddress sets the address field if the given value is not nil.
func (cuo *ClientUpdateOne) SetNillableAddress(s *string) *ClientUpdateOne {
	if s != nil {
		cuo.SetAddress(*s)
	}
	return cuo
}

// ClearAddress clears the value of address.
func (cuo *ClientUpdateOne) ClearAddress() *ClientUpdateOne {
	cuo.mutation.ClearAddress()
	return cuo
}

// SetUserid sets the userid field.
func (cuo *ClientUpdateOne) SetUserid(s string) *ClientUpdateOne {
	cuo.mutation.SetUserid(s)
	return cuo
}

// SetNillableUserid sets the userid field if the given value is not nil.
func (cuo *ClientUpdateOne) SetNillableUserid(s *string) *ClientUpdateOne {
	if s != nil {
		cuo.SetUserid(*s)
	}
	return cuo
}

// ClearUserid clears the value of userid.
func (cuo *ClientUpdateOne) ClearUserid() *ClientUpdateOne {
	cuo.mutation.ClearUserid()
	return cuo
}

// SetMandantid sets the mandantid field.
func (cuo *ClientUpdateOne) SetMandantid(s string) *ClientUpdateOne {
	cuo.mutation.SetMandantid(s)
	return cuo
}

// SetNillableMandantid sets the mandantid field if the given value is not nil.
func (cuo *ClientUpdateOne) SetNillableMandantid(s *string) *ClientUpdateOne {
	if s != nil {
		cuo.SetMandantid(*s)
	}
	return cuo
}

// ClearMandantid clears the value of mandantid.
func (cuo *ClientUpdateOne) ClearMandantid() *ClientUpdateOne {
	cuo.mutation.ClearMandantid()
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *ClientUpdateOne) Save(ctx context.Context) (*Client, error) {
	var (
		err  error
		node *Client
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClientUpdateOne) SaveX(ctx context.Context) *Client {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *ClientUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClientUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ClientUpdateOne) sqlSave(ctx context.Context) (c *Client, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   client.Table,
			Columns: client.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: client.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Client.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: client.FieldDescription,
		})
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: client.FieldName,
		})
	}
	if value, ok := cuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: client.FieldAddress,
		})
	}
	if cuo.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: client.FieldAddress,
		})
	}
	if value, ok := cuo.mutation.Userid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: client.FieldUserid,
		})
	}
	if cuo.mutation.UseridCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: client.FieldUserid,
		})
	}
	if value, ok := cuo.mutation.Mandantid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: client.FieldMandantid,
		})
	}
	if cuo.mutation.MandantidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: client.FieldMandantid,
		})
	}
	c = &Client{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{client.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
