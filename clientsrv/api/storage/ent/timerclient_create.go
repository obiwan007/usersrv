// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/obiwan007/usersrv/clientsrv/api/storage/ent/timerclient"
)

// TimerClientCreate is the builder for creating a TimerClient entity.
type TimerClientCreate struct {
	config
	mutation *TimerClientMutation
	hooks    []Hook
}

// SetDescription sets the description field.
func (tcc *TimerClientCreate) SetDescription(s string) *TimerClientCreate {
	tcc.mutation.SetDescription(s)
	return tcc
}

// SetNillableDescription sets the description field if the given value is not nil.
func (tcc *TimerClientCreate) SetNillableDescription(s *string) *TimerClientCreate {
	if s != nil {
		tcc.SetDescription(*s)
	}
	return tcc
}

// SetName sets the name field.
func (tcc *TimerClientCreate) SetName(s string) *TimerClientCreate {
	tcc.mutation.SetName(s)
	return tcc
}

// SetNillableName sets the name field if the given value is not nil.
func (tcc *TimerClientCreate) SetNillableName(s *string) *TimerClientCreate {
	if s != nil {
		tcc.SetName(*s)
	}
	return tcc
}

// SetAddress sets the address field.
func (tcc *TimerClientCreate) SetAddress(s string) *TimerClientCreate {
	tcc.mutation.SetAddress(s)
	return tcc
}

// SetNillableAddress sets the address field if the given value is not nil.
func (tcc *TimerClientCreate) SetNillableAddress(s *string) *TimerClientCreate {
	if s != nil {
		tcc.SetAddress(*s)
	}
	return tcc
}

// SetUserid sets the userid field.
func (tcc *TimerClientCreate) SetUserid(s string) *TimerClientCreate {
	tcc.mutation.SetUserid(s)
	return tcc
}

// SetNillableUserid sets the userid field if the given value is not nil.
func (tcc *TimerClientCreate) SetNillableUserid(s *string) *TimerClientCreate {
	if s != nil {
		tcc.SetUserid(*s)
	}
	return tcc
}

// SetMandantid sets the mandantid field.
func (tcc *TimerClientCreate) SetMandantid(s string) *TimerClientCreate {
	tcc.mutation.SetMandantid(s)
	return tcc
}

// SetNillableMandantid sets the mandantid field if the given value is not nil.
func (tcc *TimerClientCreate) SetNillableMandantid(s *string) *TimerClientCreate {
	if s != nil {
		tcc.SetMandantid(*s)
	}
	return tcc
}

// Save creates the TimerClient in the database.
func (tcc *TimerClientCreate) Save(ctx context.Context) (*TimerClient, error) {
	if _, ok := tcc.mutation.Description(); !ok {
		v := timerclient.DefaultDescription
		tcc.mutation.SetDescription(v)
	}
	if _, ok := tcc.mutation.Name(); !ok {
		v := timerclient.DefaultName
		tcc.mutation.SetName(v)
	}
	if _, ok := tcc.mutation.Address(); !ok {
		v := timerclient.DefaultAddress
		tcc.mutation.SetAddress(v)
	}
	if _, ok := tcc.mutation.Userid(); !ok {
		v := timerclient.DefaultUserid
		tcc.mutation.SetUserid(v)
	}
	if _, ok := tcc.mutation.Mandantid(); !ok {
		v := timerclient.DefaultMandantid
		tcc.mutation.SetMandantid(v)
	}
	var (
		err  error
		node *TimerClient
	)
	if len(tcc.hooks) == 0 {
		node, err = tcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimerClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tcc.mutation = mutation
			node, err = tcc.sqlSave(ctx)
			return node, err
		})
		for i := len(tcc.hooks) - 1; i >= 0; i-- {
			mut = tcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TimerClientCreate) SaveX(ctx context.Context) *TimerClient {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tcc *TimerClientCreate) sqlSave(ctx context.Context) (*TimerClient, error) {
	var (
		tc    = &TimerClient{config: tcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: timerclient.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: timerclient.FieldID,
			},
		}
	)
	if value, ok := tcc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timerclient.FieldDescription,
		})
		tc.Description = value
	}
	if value, ok := tcc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timerclient.FieldName,
		})
		tc.Name = value
	}
	if value, ok := tcc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timerclient.FieldAddress,
		})
		tc.Address = value
	}
	if value, ok := tcc.mutation.Userid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timerclient.FieldUserid,
		})
		tc.Userid = value
	}
	if value, ok := tcc.mutation.Mandantid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timerclient.FieldMandantid,
		})
		tc.Mandantid = value
	}
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	tc.ID = int(id)
	return tc, nil
}
