// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/obiwan007/usersrv/clientsrv/api/storage/ent/predicate"
	"github.com/obiwan007/usersrv/clientsrv/api/storage/ent/timerclient"
)

// TimerClientUpdate is the builder for updating TimerClient entities.
type TimerClientUpdate struct {
	config
	hooks      []Hook
	mutation   *TimerClientMutation
	predicates []predicate.TimerClient
}

// Where adds a new predicate for the builder.
func (tcu *TimerClientUpdate) Where(ps ...predicate.TimerClient) *TimerClientUpdate {
	tcu.predicates = append(tcu.predicates, ps...)
	return tcu
}

// SetDescription sets the description field.
func (tcu *TimerClientUpdate) SetDescription(s string) *TimerClientUpdate {
	tcu.mutation.SetDescription(s)
	return tcu
}

// SetNillableDescription sets the description field if the given value is not nil.
func (tcu *TimerClientUpdate) SetNillableDescription(s *string) *TimerClientUpdate {
	if s != nil {
		tcu.SetDescription(*s)
	}
	return tcu
}

// SetName sets the name field.
func (tcu *TimerClientUpdate) SetName(s string) *TimerClientUpdate {
	tcu.mutation.SetName(s)
	return tcu
}

// SetNillableName sets the name field if the given value is not nil.
func (tcu *TimerClientUpdate) SetNillableName(s *string) *TimerClientUpdate {
	if s != nil {
		tcu.SetName(*s)
	}
	return tcu
}

// SetAddress sets the address field.
func (tcu *TimerClientUpdate) SetAddress(s string) *TimerClientUpdate {
	tcu.mutation.SetAddress(s)
	return tcu
}

// SetNillableAddress sets the address field if the given value is not nil.
func (tcu *TimerClientUpdate) SetNillableAddress(s *string) *TimerClientUpdate {
	if s != nil {
		tcu.SetAddress(*s)
	}
	return tcu
}

// ClearAddress clears the value of address.
func (tcu *TimerClientUpdate) ClearAddress() *TimerClientUpdate {
	tcu.mutation.ClearAddress()
	return tcu
}

// SetUserid sets the userid field.
func (tcu *TimerClientUpdate) SetUserid(s string) *TimerClientUpdate {
	tcu.mutation.SetUserid(s)
	return tcu
}

// SetNillableUserid sets the userid field if the given value is not nil.
func (tcu *TimerClientUpdate) SetNillableUserid(s *string) *TimerClientUpdate {
	if s != nil {
		tcu.SetUserid(*s)
	}
	return tcu
}

// ClearUserid clears the value of userid.
func (tcu *TimerClientUpdate) ClearUserid() *TimerClientUpdate {
	tcu.mutation.ClearUserid()
	return tcu
}

// SetMandantid sets the mandantid field.
func (tcu *TimerClientUpdate) SetMandantid(s string) *TimerClientUpdate {
	tcu.mutation.SetMandantid(s)
	return tcu
}

// SetNillableMandantid sets the mandantid field if the given value is not nil.
func (tcu *TimerClientUpdate) SetNillableMandantid(s *string) *TimerClientUpdate {
	if s != nil {
		tcu.SetMandantid(*s)
	}
	return tcu
}

// ClearMandantid clears the value of mandantid.
func (tcu *TimerClientUpdate) ClearMandantid() *TimerClientUpdate {
	tcu.mutation.ClearMandantid()
	return tcu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tcu *TimerClientUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tcu.hooks) == 0 {
		affected, err = tcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimerClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tcu.mutation = mutation
			affected, err = tcu.sqlSave(ctx)
			return affected, err
		})
		for i := len(tcu.hooks) - 1; i >= 0; i-- {
			mut = tcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TimerClientUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TimerClientUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TimerClientUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tcu *TimerClientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   timerclient.Table,
			Columns: timerclient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: timerclient.FieldID,
			},
		},
	}
	if ps := tcu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timerclient.FieldDescription,
		})
	}
	if value, ok := tcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timerclient.FieldName,
		})
	}
	if value, ok := tcu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timerclient.FieldAddress,
		})
	}
	if tcu.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timerclient.FieldAddress,
		})
	}
	if value, ok := tcu.mutation.Userid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timerclient.FieldUserid,
		})
	}
	if tcu.mutation.UseridCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timerclient.FieldUserid,
		})
	}
	if value, ok := tcu.mutation.Mandantid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timerclient.FieldMandantid,
		})
	}
	if tcu.mutation.MandantidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timerclient.FieldMandantid,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timerclient.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TimerClientUpdateOne is the builder for updating a single TimerClient entity.
type TimerClientUpdateOne struct {
	config
	hooks    []Hook
	mutation *TimerClientMutation
}

// SetDescription sets the description field.
func (tcuo *TimerClientUpdateOne) SetDescription(s string) *TimerClientUpdateOne {
	tcuo.mutation.SetDescription(s)
	return tcuo
}

// SetNillableDescription sets the description field if the given value is not nil.
func (tcuo *TimerClientUpdateOne) SetNillableDescription(s *string) *TimerClientUpdateOne {
	if s != nil {
		tcuo.SetDescription(*s)
	}
	return tcuo
}

// SetName sets the name field.
func (tcuo *TimerClientUpdateOne) SetName(s string) *TimerClientUpdateOne {
	tcuo.mutation.SetName(s)
	return tcuo
}

// SetNillableName sets the name field if the given value is not nil.
func (tcuo *TimerClientUpdateOne) SetNillableName(s *string) *TimerClientUpdateOne {
	if s != nil {
		tcuo.SetName(*s)
	}
	return tcuo
}

// SetAddress sets the address field.
func (tcuo *TimerClientUpdateOne) SetAddress(s string) *TimerClientUpdateOne {
	tcuo.mutation.SetAddress(s)
	return tcuo
}

// SetNillableAddress sets the address field if the given value is not nil.
func (tcuo *TimerClientUpdateOne) SetNillableAddress(s *string) *TimerClientUpdateOne {
	if s != nil {
		tcuo.SetAddress(*s)
	}
	return tcuo
}

// ClearAddress clears the value of address.
func (tcuo *TimerClientUpdateOne) ClearAddress() *TimerClientUpdateOne {
	tcuo.mutation.ClearAddress()
	return tcuo
}

// SetUserid sets the userid field.
func (tcuo *TimerClientUpdateOne) SetUserid(s string) *TimerClientUpdateOne {
	tcuo.mutation.SetUserid(s)
	return tcuo
}

// SetNillableUserid sets the userid field if the given value is not nil.
func (tcuo *TimerClientUpdateOne) SetNillableUserid(s *string) *TimerClientUpdateOne {
	if s != nil {
		tcuo.SetUserid(*s)
	}
	return tcuo
}

// ClearUserid clears the value of userid.
func (tcuo *TimerClientUpdateOne) ClearUserid() *TimerClientUpdateOne {
	tcuo.mutation.ClearUserid()
	return tcuo
}

// SetMandantid sets the mandantid field.
func (tcuo *TimerClientUpdateOne) SetMandantid(s string) *TimerClientUpdateOne {
	tcuo.mutation.SetMandantid(s)
	return tcuo
}

// SetNillableMandantid sets the mandantid field if the given value is not nil.
func (tcuo *TimerClientUpdateOne) SetNillableMandantid(s *string) *TimerClientUpdateOne {
	if s != nil {
		tcuo.SetMandantid(*s)
	}
	return tcuo
}

// ClearMandantid clears the value of mandantid.
func (tcuo *TimerClientUpdateOne) ClearMandantid() *TimerClientUpdateOne {
	tcuo.mutation.ClearMandantid()
	return tcuo
}

// Save executes the query and returns the updated entity.
func (tcuo *TimerClientUpdateOne) Save(ctx context.Context) (*TimerClient, error) {
	var (
		err  error
		node *TimerClient
	)
	if len(tcuo.hooks) == 0 {
		node, err = tcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimerClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tcuo.mutation = mutation
			node, err = tcuo.sqlSave(ctx)
			return node, err
		})
		for i := len(tcuo.hooks) - 1; i >= 0; i-- {
			mut = tcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TimerClientUpdateOne) SaveX(ctx context.Context) *TimerClient {
	tc, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return tc
}

// Exec executes the query on the entity.
func (tcuo *TimerClientUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TimerClientUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tcuo *TimerClientUpdateOne) sqlSave(ctx context.Context) (tc *TimerClient, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   timerclient.Table,
			Columns: timerclient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: timerclient.FieldID,
			},
		},
	}
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing TimerClient.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := tcuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timerclient.FieldDescription,
		})
	}
	if value, ok := tcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timerclient.FieldName,
		})
	}
	if value, ok := tcuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timerclient.FieldAddress,
		})
	}
	if tcuo.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timerclient.FieldAddress,
		})
	}
	if value, ok := tcuo.mutation.Userid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timerclient.FieldUserid,
		})
	}
	if tcuo.mutation.UseridCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timerclient.FieldUserid,
		})
	}
	if value, ok := tcuo.mutation.Mandantid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timerclient.FieldMandantid,
		})
	}
	if tcuo.mutation.MandantidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timerclient.FieldMandantid,
		})
	}
	tc = &TimerClient{config: tcuo.config}
	_spec.Assign = tc.assignValues
	_spec.ScanValues = tc.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timerclient.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return tc, nil
}
