// Code generated by entc, DO NOT EDIT.

package timer

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/obiwan007/usersrv/timersrv/api/storage/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Projectid applies equality check predicate on the "projectid" field. It's identical to ProjectidEQ.
func Projectid(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectid), v))
	})
}

// Tags applies equality check predicate on the "tags" field. It's identical to TagsEQ.
func Tags(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTags), v))
	})
}

// TimerStart applies equality check predicate on the "timerStart" field. It's identical to TimerStartEQ.
func TimerStart(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimerStart), v))
	})
}

// TimerEnd applies equality check predicate on the "timerEnd" field. It's identical to TimerEndEQ.
func TimerEnd(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimerEnd), v))
	})
}

// ElapsedSeconds applies equality check predicate on the "elapsedSeconds" field. It's identical to ElapsedSecondsEQ.
func ElapsedSeconds(v int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldElapsedSeconds), v))
	})
}

// IsBilled applies equality check predicate on the "IsBilled" field. It's identical to IsBilledEQ.
func IsBilled(v bool) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsBilled), v))
	})
}

// IsRunning applies equality check predicate on the "IsRunning" field. It's identical to IsRunningEQ.
func IsRunning(v bool) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsRunning), v))
	})
}

// Userid applies equality check predicate on the "userid" field. It's identical to UseridEQ.
func Userid(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserid), v))
	})
}

// Mandantid applies equality check predicate on the "mandantid" field. It's identical to MandantidEQ.
func Mandantid(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMandantid), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// ProjectidEQ applies the EQ predicate on the "projectid" field.
func ProjectidEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectid), v))
	})
}

// ProjectidNEQ applies the NEQ predicate on the "projectid" field.
func ProjectidNEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProjectid), v))
	})
}

// ProjectidIn applies the In predicate on the "projectid" field.
func ProjectidIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProjectid), v...))
	})
}

// ProjectidNotIn applies the NotIn predicate on the "projectid" field.
func ProjectidNotIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProjectid), v...))
	})
}

// ProjectidGT applies the GT predicate on the "projectid" field.
func ProjectidGT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProjectid), v))
	})
}

// ProjectidGTE applies the GTE predicate on the "projectid" field.
func ProjectidGTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProjectid), v))
	})
}

// ProjectidLT applies the LT predicate on the "projectid" field.
func ProjectidLT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProjectid), v))
	})
}

// ProjectidLTE applies the LTE predicate on the "projectid" field.
func ProjectidLTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProjectid), v))
	})
}

// ProjectidContains applies the Contains predicate on the "projectid" field.
func ProjectidContains(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProjectid), v))
	})
}

// ProjectidHasPrefix applies the HasPrefix predicate on the "projectid" field.
func ProjectidHasPrefix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProjectid), v))
	})
}

// ProjectidHasSuffix applies the HasSuffix predicate on the "projectid" field.
func ProjectidHasSuffix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProjectid), v))
	})
}

// ProjectidIsNil applies the IsNil predicate on the "projectid" field.
func ProjectidIsNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProjectid)))
	})
}

// ProjectidNotNil applies the NotNil predicate on the "projectid" field.
func ProjectidNotNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProjectid)))
	})
}

// ProjectidEqualFold applies the EqualFold predicate on the "projectid" field.
func ProjectidEqualFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProjectid), v))
	})
}

// ProjectidContainsFold applies the ContainsFold predicate on the "projectid" field.
func ProjectidContainsFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProjectid), v))
	})
}

// TagsEQ applies the EQ predicate on the "tags" field.
func TagsEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTags), v))
	})
}

// TagsNEQ applies the NEQ predicate on the "tags" field.
func TagsNEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTags), v))
	})
}

// TagsIn applies the In predicate on the "tags" field.
func TagsIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTags), v...))
	})
}

// TagsNotIn applies the NotIn predicate on the "tags" field.
func TagsNotIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTags), v...))
	})
}

// TagsGT applies the GT predicate on the "tags" field.
func TagsGT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTags), v))
	})
}

// TagsGTE applies the GTE predicate on the "tags" field.
func TagsGTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTags), v))
	})
}

// TagsLT applies the LT predicate on the "tags" field.
func TagsLT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTags), v))
	})
}

// TagsLTE applies the LTE predicate on the "tags" field.
func TagsLTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTags), v))
	})
}

// TagsContains applies the Contains predicate on the "tags" field.
func TagsContains(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTags), v))
	})
}

// TagsHasPrefix applies the HasPrefix predicate on the "tags" field.
func TagsHasPrefix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTags), v))
	})
}

// TagsHasSuffix applies the HasSuffix predicate on the "tags" field.
func TagsHasSuffix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTags), v))
	})
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTags)))
	})
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTags)))
	})
}

// TagsEqualFold applies the EqualFold predicate on the "tags" field.
func TagsEqualFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTags), v))
	})
}

// TagsContainsFold applies the ContainsFold predicate on the "tags" field.
func TagsContainsFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTags), v))
	})
}

// TimerStartEQ applies the EQ predicate on the "timerStart" field.
func TimerStartEQ(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimerStart), v))
	})
}

// TimerStartNEQ applies the NEQ predicate on the "timerStart" field.
func TimerStartNEQ(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimerStart), v))
	})
}

// TimerStartIn applies the In predicate on the "timerStart" field.
func TimerStartIn(vs ...time.Time) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimerStart), v...))
	})
}

// TimerStartNotIn applies the NotIn predicate on the "timerStart" field.
func TimerStartNotIn(vs ...time.Time) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimerStart), v...))
	})
}

// TimerStartGT applies the GT predicate on the "timerStart" field.
func TimerStartGT(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimerStart), v))
	})
}

// TimerStartGTE applies the GTE predicate on the "timerStart" field.
func TimerStartGTE(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimerStart), v))
	})
}

// TimerStartLT applies the LT predicate on the "timerStart" field.
func TimerStartLT(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimerStart), v))
	})
}

// TimerStartLTE applies the LTE predicate on the "timerStart" field.
func TimerStartLTE(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimerStart), v))
	})
}

// TimerStartIsNil applies the IsNil predicate on the "timerStart" field.
func TimerStartIsNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTimerStart)))
	})
}

// TimerStartNotNil applies the NotNil predicate on the "timerStart" field.
func TimerStartNotNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTimerStart)))
	})
}

// TimerEndEQ applies the EQ predicate on the "timerEnd" field.
func TimerEndEQ(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimerEnd), v))
	})
}

// TimerEndNEQ applies the NEQ predicate on the "timerEnd" field.
func TimerEndNEQ(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimerEnd), v))
	})
}

// TimerEndIn applies the In predicate on the "timerEnd" field.
func TimerEndIn(vs ...time.Time) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimerEnd), v...))
	})
}

// TimerEndNotIn applies the NotIn predicate on the "timerEnd" field.
func TimerEndNotIn(vs ...time.Time) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimerEnd), v...))
	})
}

// TimerEndGT applies the GT predicate on the "timerEnd" field.
func TimerEndGT(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimerEnd), v))
	})
}

// TimerEndGTE applies the GTE predicate on the "timerEnd" field.
func TimerEndGTE(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimerEnd), v))
	})
}

// TimerEndLT applies the LT predicate on the "timerEnd" field.
func TimerEndLT(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimerEnd), v))
	})
}

// TimerEndLTE applies the LTE predicate on the "timerEnd" field.
func TimerEndLTE(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimerEnd), v))
	})
}

// TimerEndIsNil applies the IsNil predicate on the "timerEnd" field.
func TimerEndIsNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTimerEnd)))
	})
}

// TimerEndNotNil applies the NotNil predicate on the "timerEnd" field.
func TimerEndNotNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTimerEnd)))
	})
}

// ElapsedSecondsEQ applies the EQ predicate on the "elapsedSeconds" field.
func ElapsedSecondsEQ(v int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldElapsedSeconds), v))
	})
}

// ElapsedSecondsNEQ applies the NEQ predicate on the "elapsedSeconds" field.
func ElapsedSecondsNEQ(v int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldElapsedSeconds), v))
	})
}

// ElapsedSecondsIn applies the In predicate on the "elapsedSeconds" field.
func ElapsedSecondsIn(vs ...int) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldElapsedSeconds), v...))
	})
}

// ElapsedSecondsNotIn applies the NotIn predicate on the "elapsedSeconds" field.
func ElapsedSecondsNotIn(vs ...int) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldElapsedSeconds), v...))
	})
}

// ElapsedSecondsGT applies the GT predicate on the "elapsedSeconds" field.
func ElapsedSecondsGT(v int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldElapsedSeconds), v))
	})
}

// ElapsedSecondsGTE applies the GTE predicate on the "elapsedSeconds" field.
func ElapsedSecondsGTE(v int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldElapsedSeconds), v))
	})
}

// ElapsedSecondsLT applies the LT predicate on the "elapsedSeconds" field.
func ElapsedSecondsLT(v int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldElapsedSeconds), v))
	})
}

// ElapsedSecondsLTE applies the LTE predicate on the "elapsedSeconds" field.
func ElapsedSecondsLTE(v int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldElapsedSeconds), v))
	})
}

// ElapsedSecondsIsNil applies the IsNil predicate on the "elapsedSeconds" field.
func ElapsedSecondsIsNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldElapsedSeconds)))
	})
}

// ElapsedSecondsNotNil applies the NotNil predicate on the "elapsedSeconds" field.
func ElapsedSecondsNotNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldElapsedSeconds)))
	})
}

// IsBilledEQ applies the EQ predicate on the "IsBilled" field.
func IsBilledEQ(v bool) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsBilled), v))
	})
}

// IsBilledNEQ applies the NEQ predicate on the "IsBilled" field.
func IsBilledNEQ(v bool) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsBilled), v))
	})
}

// IsBilledIsNil applies the IsNil predicate on the "IsBilled" field.
func IsBilledIsNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsBilled)))
	})
}

// IsBilledNotNil applies the NotNil predicate on the "IsBilled" field.
func IsBilledNotNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsBilled)))
	})
}

// IsRunningEQ applies the EQ predicate on the "IsRunning" field.
func IsRunningEQ(v bool) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsRunning), v))
	})
}

// IsRunningNEQ applies the NEQ predicate on the "IsRunning" field.
func IsRunningNEQ(v bool) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsRunning), v))
	})
}

// IsRunningIsNil applies the IsNil predicate on the "IsRunning" field.
func IsRunningIsNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsRunning)))
	})
}

// IsRunningNotNil applies the NotNil predicate on the "IsRunning" field.
func IsRunningNotNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsRunning)))
	})
}

// UseridEQ applies the EQ predicate on the "userid" field.
func UseridEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserid), v))
	})
}

// UseridNEQ applies the NEQ predicate on the "userid" field.
func UseridNEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserid), v))
	})
}

// UseridIn applies the In predicate on the "userid" field.
func UseridIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserid), v...))
	})
}

// UseridNotIn applies the NotIn predicate on the "userid" field.
func UseridNotIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserid), v...))
	})
}

// UseridGT applies the GT predicate on the "userid" field.
func UseridGT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserid), v))
	})
}

// UseridGTE applies the GTE predicate on the "userid" field.
func UseridGTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserid), v))
	})
}

// UseridLT applies the LT predicate on the "userid" field.
func UseridLT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserid), v))
	})
}

// UseridLTE applies the LTE predicate on the "userid" field.
func UseridLTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserid), v))
	})
}

// UseridContains applies the Contains predicate on the "userid" field.
func UseridContains(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserid), v))
	})
}

// UseridHasPrefix applies the HasPrefix predicate on the "userid" field.
func UseridHasPrefix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserid), v))
	})
}

// UseridHasSuffix applies the HasSuffix predicate on the "userid" field.
func UseridHasSuffix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserid), v))
	})
}

// UseridIsNil applies the IsNil predicate on the "userid" field.
func UseridIsNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserid)))
	})
}

// UseridNotNil applies the NotNil predicate on the "userid" field.
func UseridNotNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserid)))
	})
}

// UseridEqualFold applies the EqualFold predicate on the "userid" field.
func UseridEqualFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserid), v))
	})
}

// UseridContainsFold applies the ContainsFold predicate on the "userid" field.
func UseridContainsFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserid), v))
	})
}

// MandantidEQ applies the EQ predicate on the "mandantid" field.
func MandantidEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMandantid), v))
	})
}

// MandantidNEQ applies the NEQ predicate on the "mandantid" field.
func MandantidNEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMandantid), v))
	})
}

// MandantidIn applies the In predicate on the "mandantid" field.
func MandantidIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMandantid), v...))
	})
}

// MandantidNotIn applies the NotIn predicate on the "mandantid" field.
func MandantidNotIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMandantid), v...))
	})
}

// MandantidGT applies the GT predicate on the "mandantid" field.
func MandantidGT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMandantid), v))
	})
}

// MandantidGTE applies the GTE predicate on the "mandantid" field.
func MandantidGTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMandantid), v))
	})
}

// MandantidLT applies the LT predicate on the "mandantid" field.
func MandantidLT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMandantid), v))
	})
}

// MandantidLTE applies the LTE predicate on the "mandantid" field.
func MandantidLTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMandantid), v))
	})
}

// MandantidContains applies the Contains predicate on the "mandantid" field.
func MandantidContains(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMandantid), v))
	})
}

// MandantidHasPrefix applies the HasPrefix predicate on the "mandantid" field.
func MandantidHasPrefix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMandantid), v))
	})
}

// MandantidHasSuffix applies the HasSuffix predicate on the "mandantid" field.
func MandantidHasSuffix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMandantid), v))
	})
}

// MandantidIsNil applies the IsNil predicate on the "mandantid" field.
func MandantidIsNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMandantid)))
	})
}

// MandantidNotNil applies the NotNil predicate on the "mandantid" field.
func MandantidNotNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMandantid)))
	})
}

// MandantidEqualFold applies the EqualFold predicate on the "mandantid" field.
func MandantidEqualFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMandantid), v))
	})
}

// MandantidContainsFold applies the ContainsFold predicate on the "mandantid" field.
func MandantidContainsFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMandantid), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Timer) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Timer) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Timer) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		p(s.Not())
	})
}
