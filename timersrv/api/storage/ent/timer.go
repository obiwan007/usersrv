// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/obiwan007/usersrv/timersrv/api/storage/ent/timer"
)

// Timer is the model entity for the Timer schema.
type Timer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Projectid holds the value of the "projectid" field.
	Projectid string `json:"projectid,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags string `json:"tags,omitempty"`
	// TimerStart holds the value of the "timerStart" field.
	TimerStart time.Time `json:"timerStart,omitempty"`
	// TimerEnd holds the value of the "timerEnd" field.
	TimerEnd time.Time `json:"timerEnd,omitempty"`
	// ElapsedSeconds holds the value of the "elapsedSeconds" field.
	ElapsedSeconds int `json:"elapsedSeconds,omitempty"`
	// IsBilled holds the value of the "IsBilled" field.
	IsBilled bool `json:"IsBilled,omitempty"`
	// IsRunning holds the value of the "IsRunning" field.
	IsRunning bool `json:"IsRunning,omitempty"`
	// Userid holds the value of the "userid" field.
	Userid string `json:"userid,omitempty"`
	// Mandantid holds the value of the "mandantid" field.
	Mandantid string `json:"mandantid,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Timer) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // description
		&sql.NullString{}, // projectid
		&sql.NullString{}, // tags
		&sql.NullTime{},   // timerStart
		&sql.NullTime{},   // timerEnd
		&sql.NullInt64{},  // elapsedSeconds
		&sql.NullBool{},   // IsBilled
		&sql.NullBool{},   // IsRunning
		&sql.NullString{}, // userid
		&sql.NullString{}, // mandantid
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Timer fields.
func (t *Timer) assignValues(values ...interface{}) error {
	if m, n := len(values), len(timer.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[0])
	} else if value.Valid {
		t.Description = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field projectid", values[1])
	} else if value.Valid {
		t.Projectid = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tags", values[2])
	} else if value.Valid {
		t.Tags = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field timerStart", values[3])
	} else if value.Valid {
		t.TimerStart = value.Time
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field timerEnd", values[4])
	} else if value.Valid {
		t.TimerEnd = value.Time
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field elapsedSeconds", values[5])
	} else if value.Valid {
		t.ElapsedSeconds = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field IsBilled", values[6])
	} else if value.Valid {
		t.IsBilled = value.Bool
	}
	if value, ok := values[7].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field IsRunning", values[7])
	} else if value.Valid {
		t.IsRunning = value.Bool
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userid", values[8])
	} else if value.Valid {
		t.Userid = value.String
	}
	if value, ok := values[9].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field mandantid", values[9])
	} else if value.Valid {
		t.Mandantid = value.String
	}
	return nil
}

// Update returns a builder for updating this Timer.
// Note that, you need to call Timer.Unwrap() before calling this method, if this Timer
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Timer) Update() *TimerUpdateOne {
	return (&TimerClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Timer) Unwrap() *Timer {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Timer is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Timer) String() string {
	var builder strings.Builder
	builder.WriteString("Timer(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", description=")
	builder.WriteString(t.Description)
	builder.WriteString(", projectid=")
	builder.WriteString(t.Projectid)
	builder.WriteString(", tags=")
	builder.WriteString(t.Tags)
	builder.WriteString(", timerStart=")
	builder.WriteString(t.TimerStart.Format(time.ANSIC))
	builder.WriteString(", timerEnd=")
	builder.WriteString(t.TimerEnd.Format(time.ANSIC))
	builder.WriteString(", elapsedSeconds=")
	builder.WriteString(fmt.Sprintf("%v", t.ElapsedSeconds))
	builder.WriteString(", IsBilled=")
	builder.WriteString(fmt.Sprintf("%v", t.IsBilled))
	builder.WriteString(", IsRunning=")
	builder.WriteString(fmt.Sprintf("%v", t.IsRunning))
	builder.WriteString(", userid=")
	builder.WriteString(t.Userid)
	builder.WriteString(", mandantid=")
	builder.WriteString(t.Mandantid)
	builder.WriteByte(')')
	return builder.String()
}

// Timers is a parsable slice of Timer.
type Timers []*Timer

func (t Timers) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
