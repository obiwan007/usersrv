// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/obiwan007/usersrv/timersrv/api/storage/ent/predicate"
	"github.com/obiwan007/usersrv/timersrv/api/storage/ent/timer"
)

// TimerUpdate is the builder for updating Timer entities.
type TimerUpdate struct {
	config
	hooks      []Hook
	mutation   *TimerMutation
	predicates []predicate.Timer
}

// Where adds a new predicate for the builder.
func (tu *TimerUpdate) Where(ps ...predicate.Timer) *TimerUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetDescription sets the description field.
func (tu *TimerUpdate) SetDescription(s string) *TimerUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the description field if the given value is not nil.
func (tu *TimerUpdate) SetNillableDescription(s *string) *TimerUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetProjectid sets the projectid field.
func (tu *TimerUpdate) SetProjectid(s string) *TimerUpdate {
	tu.mutation.SetProjectid(s)
	return tu
}

// SetNillableProjectid sets the projectid field if the given value is not nil.
func (tu *TimerUpdate) SetNillableProjectid(s *string) *TimerUpdate {
	if s != nil {
		tu.SetProjectid(*s)
	}
	return tu
}

// ClearProjectid clears the value of projectid.
func (tu *TimerUpdate) ClearProjectid() *TimerUpdate {
	tu.mutation.ClearProjectid()
	return tu
}

// SetTags sets the tags field.
func (tu *TimerUpdate) SetTags(s string) *TimerUpdate {
	tu.mutation.SetTags(s)
	return tu
}

// SetNillableTags sets the tags field if the given value is not nil.
func (tu *TimerUpdate) SetNillableTags(s *string) *TimerUpdate {
	if s != nil {
		tu.SetTags(*s)
	}
	return tu
}

// ClearTags clears the value of tags.
func (tu *TimerUpdate) ClearTags() *TimerUpdate {
	tu.mutation.ClearTags()
	return tu
}

// SetTimerStart sets the timerStart field.
func (tu *TimerUpdate) SetTimerStart(t time.Time) *TimerUpdate {
	tu.mutation.SetTimerStart(t)
	return tu
}

// SetNillableTimerStart sets the timerStart field if the given value is not nil.
func (tu *TimerUpdate) SetNillableTimerStart(t *time.Time) *TimerUpdate {
	if t != nil {
		tu.SetTimerStart(*t)
	}
	return tu
}

// ClearTimerStart clears the value of timerStart.
func (tu *TimerUpdate) ClearTimerStart() *TimerUpdate {
	tu.mutation.ClearTimerStart()
	return tu
}

// SetTimerEnd sets the timerEnd field.
func (tu *TimerUpdate) SetTimerEnd(t time.Time) *TimerUpdate {
	tu.mutation.SetTimerEnd(t)
	return tu
}

// SetNillableTimerEnd sets the timerEnd field if the given value is not nil.
func (tu *TimerUpdate) SetNillableTimerEnd(t *time.Time) *TimerUpdate {
	if t != nil {
		tu.SetTimerEnd(*t)
	}
	return tu
}

// ClearTimerEnd clears the value of timerEnd.
func (tu *TimerUpdate) ClearTimerEnd() *TimerUpdate {
	tu.mutation.ClearTimerEnd()
	return tu
}

// SetElapsedSeconds sets the elapsedSeconds field.
func (tu *TimerUpdate) SetElapsedSeconds(i int) *TimerUpdate {
	tu.mutation.ResetElapsedSeconds()
	tu.mutation.SetElapsedSeconds(i)
	return tu
}

// SetNillableElapsedSeconds sets the elapsedSeconds field if the given value is not nil.
func (tu *TimerUpdate) SetNillableElapsedSeconds(i *int) *TimerUpdate {
	if i != nil {
		tu.SetElapsedSeconds(*i)
	}
	return tu
}

// AddElapsedSeconds adds i to elapsedSeconds.
func (tu *TimerUpdate) AddElapsedSeconds(i int) *TimerUpdate {
	tu.mutation.AddElapsedSeconds(i)
	return tu
}

// ClearElapsedSeconds clears the value of elapsedSeconds.
func (tu *TimerUpdate) ClearElapsedSeconds() *TimerUpdate {
	tu.mutation.ClearElapsedSeconds()
	return tu
}

// SetIsBilled sets the IsBilled field.
func (tu *TimerUpdate) SetIsBilled(b bool) *TimerUpdate {
	tu.mutation.SetIsBilled(b)
	return tu
}

// SetNillableIsBilled sets the IsBilled field if the given value is not nil.
func (tu *TimerUpdate) SetNillableIsBilled(b *bool) *TimerUpdate {
	if b != nil {
		tu.SetIsBilled(*b)
	}
	return tu
}

// ClearIsBilled clears the value of IsBilled.
func (tu *TimerUpdate) ClearIsBilled() *TimerUpdate {
	tu.mutation.ClearIsBilled()
	return tu
}

// SetIsRunning sets the IsRunning field.
func (tu *TimerUpdate) SetIsRunning(b bool) *TimerUpdate {
	tu.mutation.SetIsRunning(b)
	return tu
}

// SetNillableIsRunning sets the IsRunning field if the given value is not nil.
func (tu *TimerUpdate) SetNillableIsRunning(b *bool) *TimerUpdate {
	if b != nil {
		tu.SetIsRunning(*b)
	}
	return tu
}

// ClearIsRunning clears the value of IsRunning.
func (tu *TimerUpdate) ClearIsRunning() *TimerUpdate {
	tu.mutation.ClearIsRunning()
	return tu
}

// SetUserid sets the userid field.
func (tu *TimerUpdate) SetUserid(s string) *TimerUpdate {
	tu.mutation.SetUserid(s)
	return tu
}

// SetNillableUserid sets the userid field if the given value is not nil.
func (tu *TimerUpdate) SetNillableUserid(s *string) *TimerUpdate {
	if s != nil {
		tu.SetUserid(*s)
	}
	return tu
}

// ClearUserid clears the value of userid.
func (tu *TimerUpdate) ClearUserid() *TimerUpdate {
	tu.mutation.ClearUserid()
	return tu
}

// SetMandantid sets the mandantid field.
func (tu *TimerUpdate) SetMandantid(s string) *TimerUpdate {
	tu.mutation.SetMandantid(s)
	return tu
}

// SetNillableMandantid sets the mandantid field if the given value is not nil.
func (tu *TimerUpdate) SetNillableMandantid(s *string) *TimerUpdate {
	if s != nil {
		tu.SetMandantid(*s)
	}
	return tu
}

// ClearMandantid clears the value of mandantid.
func (tu *TimerUpdate) ClearMandantid() *TimerUpdate {
	tu.mutation.ClearMandantid()
	return tu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TimerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TimerUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TimerUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TimerUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TimerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   timer.Table,
			Columns: timer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: timer.FieldID,
			},
		},
	}
	if ps := tu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timer.FieldDescription,
		})
	}
	if value, ok := tu.mutation.Projectid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timer.FieldProjectid,
		})
	}
	if tu.mutation.ProjectidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timer.FieldProjectid,
		})
	}
	if value, ok := tu.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timer.FieldTags,
		})
	}
	if tu.mutation.TagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timer.FieldTags,
		})
	}
	if value, ok := tu.mutation.TimerStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timer.FieldTimerStart,
		})
	}
	if tu.mutation.TimerStartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: timer.FieldTimerStart,
		})
	}
	if value, ok := tu.mutation.TimerEnd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timer.FieldTimerEnd,
		})
	}
	if tu.mutation.TimerEndCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: timer.FieldTimerEnd,
		})
	}
	if value, ok := tu.mutation.ElapsedSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: timer.FieldElapsedSeconds,
		})
	}
	if value, ok := tu.mutation.AddedElapsedSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: timer.FieldElapsedSeconds,
		})
	}
	if tu.mutation.ElapsedSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: timer.FieldElapsedSeconds,
		})
	}
	if value, ok := tu.mutation.IsBilled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: timer.FieldIsBilled,
		})
	}
	if tu.mutation.IsBilledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: timer.FieldIsBilled,
		})
	}
	if value, ok := tu.mutation.IsRunning(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: timer.FieldIsRunning,
		})
	}
	if tu.mutation.IsRunningCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: timer.FieldIsRunning,
		})
	}
	if value, ok := tu.mutation.Userid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timer.FieldUserid,
		})
	}
	if tu.mutation.UseridCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timer.FieldUserid,
		})
	}
	if value, ok := tu.mutation.Mandantid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timer.FieldMandantid,
		})
	}
	if tu.mutation.MandantidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timer.FieldMandantid,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TimerUpdateOne is the builder for updating a single Timer entity.
type TimerUpdateOne struct {
	config
	hooks    []Hook
	mutation *TimerMutation
}

// SetDescription sets the description field.
func (tuo *TimerUpdateOne) SetDescription(s string) *TimerUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the description field if the given value is not nil.
func (tuo *TimerUpdateOne) SetNillableDescription(s *string) *TimerUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetProjectid sets the projectid field.
func (tuo *TimerUpdateOne) SetProjectid(s string) *TimerUpdateOne {
	tuo.mutation.SetProjectid(s)
	return tuo
}

// SetNillableProjectid sets the projectid field if the given value is not nil.
func (tuo *TimerUpdateOne) SetNillableProjectid(s *string) *TimerUpdateOne {
	if s != nil {
		tuo.SetProjectid(*s)
	}
	return tuo
}

// ClearProjectid clears the value of projectid.
func (tuo *TimerUpdateOne) ClearProjectid() *TimerUpdateOne {
	tuo.mutation.ClearProjectid()
	return tuo
}

// SetTags sets the tags field.
func (tuo *TimerUpdateOne) SetTags(s string) *TimerUpdateOne {
	tuo.mutation.SetTags(s)
	return tuo
}

// SetNillableTags sets the tags field if the given value is not nil.
func (tuo *TimerUpdateOne) SetNillableTags(s *string) *TimerUpdateOne {
	if s != nil {
		tuo.SetTags(*s)
	}
	return tuo
}

// ClearTags clears the value of tags.
func (tuo *TimerUpdateOne) ClearTags() *TimerUpdateOne {
	tuo.mutation.ClearTags()
	return tuo
}

// SetTimerStart sets the timerStart field.
func (tuo *TimerUpdateOne) SetTimerStart(t time.Time) *TimerUpdateOne {
	tuo.mutation.SetTimerStart(t)
	return tuo
}

// SetNillableTimerStart sets the timerStart field if the given value is not nil.
func (tuo *TimerUpdateOne) SetNillableTimerStart(t *time.Time) *TimerUpdateOne {
	if t != nil {
		tuo.SetTimerStart(*t)
	}
	return tuo
}

// ClearTimerStart clears the value of timerStart.
func (tuo *TimerUpdateOne) ClearTimerStart() *TimerUpdateOne {
	tuo.mutation.ClearTimerStart()
	return tuo
}

// SetTimerEnd sets the timerEnd field.
func (tuo *TimerUpdateOne) SetTimerEnd(t time.Time) *TimerUpdateOne {
	tuo.mutation.SetTimerEnd(t)
	return tuo
}

// SetNillableTimerEnd sets the timerEnd field if the given value is not nil.
func (tuo *TimerUpdateOne) SetNillableTimerEnd(t *time.Time) *TimerUpdateOne {
	if t != nil {
		tuo.SetTimerEnd(*t)
	}
	return tuo
}

// ClearTimerEnd clears the value of timerEnd.
func (tuo *TimerUpdateOne) ClearTimerEnd() *TimerUpdateOne {
	tuo.mutation.ClearTimerEnd()
	return tuo
}

// SetElapsedSeconds sets the elapsedSeconds field.
func (tuo *TimerUpdateOne) SetElapsedSeconds(i int) *TimerUpdateOne {
	tuo.mutation.ResetElapsedSeconds()
	tuo.mutation.SetElapsedSeconds(i)
	return tuo
}

// SetNillableElapsedSeconds sets the elapsedSeconds field if the given value is not nil.
func (tuo *TimerUpdateOne) SetNillableElapsedSeconds(i *int) *TimerUpdateOne {
	if i != nil {
		tuo.SetElapsedSeconds(*i)
	}
	return tuo
}

// AddElapsedSeconds adds i to elapsedSeconds.
func (tuo *TimerUpdateOne) AddElapsedSeconds(i int) *TimerUpdateOne {
	tuo.mutation.AddElapsedSeconds(i)
	return tuo
}

// ClearElapsedSeconds clears the value of elapsedSeconds.
func (tuo *TimerUpdateOne) ClearElapsedSeconds() *TimerUpdateOne {
	tuo.mutation.ClearElapsedSeconds()
	return tuo
}

// SetIsBilled sets the IsBilled field.
func (tuo *TimerUpdateOne) SetIsBilled(b bool) *TimerUpdateOne {
	tuo.mutation.SetIsBilled(b)
	return tuo
}

// SetNillableIsBilled sets the IsBilled field if the given value is not nil.
func (tuo *TimerUpdateOne) SetNillableIsBilled(b *bool) *TimerUpdateOne {
	if b != nil {
		tuo.SetIsBilled(*b)
	}
	return tuo
}

// ClearIsBilled clears the value of IsBilled.
func (tuo *TimerUpdateOne) ClearIsBilled() *TimerUpdateOne {
	tuo.mutation.ClearIsBilled()
	return tuo
}

// SetIsRunning sets the IsRunning field.
func (tuo *TimerUpdateOne) SetIsRunning(b bool) *TimerUpdateOne {
	tuo.mutation.SetIsRunning(b)
	return tuo
}

// SetNillableIsRunning sets the IsRunning field if the given value is not nil.
func (tuo *TimerUpdateOne) SetNillableIsRunning(b *bool) *TimerUpdateOne {
	if b != nil {
		tuo.SetIsRunning(*b)
	}
	return tuo
}

// ClearIsRunning clears the value of IsRunning.
func (tuo *TimerUpdateOne) ClearIsRunning() *TimerUpdateOne {
	tuo.mutation.ClearIsRunning()
	return tuo
}

// SetUserid sets the userid field.
func (tuo *TimerUpdateOne) SetUserid(s string) *TimerUpdateOne {
	tuo.mutation.SetUserid(s)
	return tuo
}

// SetNillableUserid sets the userid field if the given value is not nil.
func (tuo *TimerUpdateOne) SetNillableUserid(s *string) *TimerUpdateOne {
	if s != nil {
		tuo.SetUserid(*s)
	}
	return tuo
}

// ClearUserid clears the value of userid.
func (tuo *TimerUpdateOne) ClearUserid() *TimerUpdateOne {
	tuo.mutation.ClearUserid()
	return tuo
}

// SetMandantid sets the mandantid field.
func (tuo *TimerUpdateOne) SetMandantid(s string) *TimerUpdateOne {
	tuo.mutation.SetMandantid(s)
	return tuo
}

// SetNillableMandantid sets the mandantid field if the given value is not nil.
func (tuo *TimerUpdateOne) SetNillableMandantid(s *string) *TimerUpdateOne {
	if s != nil {
		tuo.SetMandantid(*s)
	}
	return tuo
}

// ClearMandantid clears the value of mandantid.
func (tuo *TimerUpdateOne) ClearMandantid() *TimerUpdateOne {
	tuo.mutation.ClearMandantid()
	return tuo
}

// Save executes the query and returns the updated entity.
func (tuo *TimerUpdateOne) Save(ctx context.Context) (*Timer, error) {
	var (
		err  error
		node *Timer
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TimerUpdateOne) SaveX(ctx context.Context) *Timer {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TimerUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TimerUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TimerUpdateOne) sqlSave(ctx context.Context) (t *Timer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   timer.Table,
			Columns: timer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: timer.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Timer.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := tuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timer.FieldDescription,
		})
	}
	if value, ok := tuo.mutation.Projectid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timer.FieldProjectid,
		})
	}
	if tuo.mutation.ProjectidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timer.FieldProjectid,
		})
	}
	if value, ok := tuo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timer.FieldTags,
		})
	}
	if tuo.mutation.TagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timer.FieldTags,
		})
	}
	if value, ok := tuo.mutation.TimerStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timer.FieldTimerStart,
		})
	}
	if tuo.mutation.TimerStartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: timer.FieldTimerStart,
		})
	}
	if value, ok := tuo.mutation.TimerEnd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timer.FieldTimerEnd,
		})
	}
	if tuo.mutation.TimerEndCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: timer.FieldTimerEnd,
		})
	}
	if value, ok := tuo.mutation.ElapsedSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: timer.FieldElapsedSeconds,
		})
	}
	if value, ok := tuo.mutation.AddedElapsedSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: timer.FieldElapsedSeconds,
		})
	}
	if tuo.mutation.ElapsedSecondsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: timer.FieldElapsedSeconds,
		})
	}
	if value, ok := tuo.mutation.IsBilled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: timer.FieldIsBilled,
		})
	}
	if tuo.mutation.IsBilledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: timer.FieldIsBilled,
		})
	}
	if value, ok := tuo.mutation.IsRunning(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: timer.FieldIsRunning,
		})
	}
	if tuo.mutation.IsRunningCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: timer.FieldIsRunning,
		})
	}
	if value, ok := tuo.mutation.Userid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timer.FieldUserid,
		})
	}
	if tuo.mutation.UseridCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timer.FieldUserid,
		})
	}
	if value, ok := tuo.mutation.Mandantid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timer.FieldMandantid,
		})
	}
	if tuo.mutation.MandantidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timer.FieldMandantid,
		})
	}
	t = &Timer{config: tuo.config}
	_spec.Assign = t.assignValues
	_spec.ScanValues = t.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return t, nil
}
