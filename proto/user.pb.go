// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package userservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
type User struct {
	// The name of the feature.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The point where the feature is detected.
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Id                   *Id      `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetId() *Id {
	if m != nil {
		return m.Id
	}
	return nil
}

type Id struct {
	// The name of the feature.
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListUsers struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListUsers) Reset()         { *m = ListUsers{} }
func (m *ListUsers) String() string { return proto.CompactTextString(m) }
func (*ListUsers) ProtoMessage()    {}
func (*ListUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{2}
}

func (m *ListUsers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListUsers.Unmarshal(m, b)
}
func (m *ListUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListUsers.Marshal(b, m, deterministic)
}
func (m *ListUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUsers.Merge(m, src)
}
func (m *ListUsers) XXX_Size() int {
	return xxx_messageInfo_ListUsers.Size(m)
}
func (m *ListUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUsers.DiscardUnknown(m)
}

var xxx_messageInfo_ListUsers proto.InternalMessageInfo

type UsersResponse struct {
	Users                []*User  `protobuf:"bytes,1,rep,name=Users,proto3" json:"Users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UsersResponse) Reset()         { *m = UsersResponse{} }
func (m *UsersResponse) String() string { return proto.CompactTextString(m) }
func (*UsersResponse) ProtoMessage()    {}
func (*UsersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{3}
}

func (m *UsersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsersResponse.Unmarshal(m, b)
}
func (m *UsersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsersResponse.Marshal(b, m, deterministic)
}
func (m *UsersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsersResponse.Merge(m, src)
}
func (m *UsersResponse) XXX_Size() int {
	return xxx_messageInfo_UsersResponse.Size(m)
}
func (m *UsersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UsersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UsersResponse proto.InternalMessageInfo

func (m *UsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "userservice.User")
	proto.RegisterType((*Id)(nil), "userservice.Id")
	proto.RegisterType((*ListUsers)(nil), "userservice.ListUsers")
	proto.RegisterType((*UsersResponse)(nil), "userservice.UsersResponse")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }

var fileDescriptor_116e343673f7ffaf = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0xed, 0xa6, 0xad, 0x6d, 0x27, 0xf8, 0x35, 0x88, 0x84, 0x78, 0x30, 0xe4, 0x62, 0x4e, 0x2b,
	0x8d, 0x17, 0x8f, 0xda, 0x8b, 0x14, 0x3c, 0x94, 0x88, 0x78, 0x8e, 0xdd, 0xa1, 0x2c, 0xd8, 0x6e,
	0xd8, 0x49, 0xd4, 0xff, 0xe5, 0x1f, 0x94, 0xdd, 0x4a, 0x68, 0x4d, 0x6f, 0x6f, 0xdf, 0x9b, 0xf7,
	0x76, 0x1e, 0x03, 0xd0, 0x30, 0x59, 0x59, 0x59, 0x53, 0x1b, 0x0c, 0x1d, 0x66, 0xb2, 0x9f, 0x7a,
	0x49, 0xe9, 0x1b, 0x0c, 0x5e, 0x99, 0x2c, 0x22, 0x0c, 0x36, 0xe5, 0x9a, 0x22, 0x91, 0x88, 0x6c,
	0x52, 0x78, 0x8c, 0x31, 0x8c, 0xab, 0x92, 0xf9, 0xcb, 0x58, 0x15, 0x05, 0x9e, 0x6f, 0xdf, 0x78,
	0x0d, 0x81, 0x56, 0x51, 0x3f, 0x11, 0x59, 0x98, 0x9f, 0xca, 0x9d, 0x44, 0x39, 0x57, 0x45, 0xa0,
	0x55, 0x7a, 0x01, 0xc1, 0x5c, 0xe1, 0x89, 0x1f, 0x73, 0xa1, 0x43, 0xcf, 0x86, 0x30, 0x79, 0xd6,
	0x5c, 0xbb, 0x2f, 0x39, 0xbd, 0x87, 0x63, 0x0f, 0x0a, 0xe2, 0xca, 0x6c, 0x98, 0xf0, 0x06, 0x86,
	0x9e, 0x88, 0x44, 0xd2, 0xcf, 0xc2, 0xfc, 0x7c, 0x2f, 0xd7, 0x29, 0xc5, 0x56, 0xcf, 0x7f, 0x04,
	0x84, 0x0e, 0xbd, 0x6c, 0x35, 0x9c, 0xc2, 0xe8, 0x51, 0x29, 0x5f, 0xa4, 0x6b, 0x8a, 0xbb, 0x54,
	0xda, 0xc3, 0x5b, 0x18, 0x3d, 0x91, 0x5f, 0x04, 0xff, 0xef, 0x7f, 0xd8, 0xf0, 0x00, 0xe3, 0x3f,
	0x03, 0xe3, 0xe5, 0xde, 0x40, 0xdb, 0x28, 0x8e, 0x3b, 0xc6, 0xb6, 0x5c, 0xda, 0x9b, 0x4d, 0xe1,
	0x4a, 0x1b, 0xb9, 0xb2, 0xd5, 0x52, 0xd2, 0x77, 0xb9, 0xae, 0x3e, 0x88, 0xa5, 0x35, 0x4d, 0x4d,
	0xab, 0x46, 0x2b, 0x9a, 0x9d, 0xed, 0x34, 0x5a, 0xb8, 0x4b, 0x2d, 0xc4, 0xfb, 0x91, 0x3f, 0xd9,
	0xdd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xa1, 0x25, 0x35, 0xc0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	// rpc UpdateUser(User) returns (User) {}
	GetUsers(ctx context.Context, in *ListUsers, opts ...grpc.CallOption) (*UsersResponse, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/userservice.UserService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/userservice.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *ListUsers, opts ...grpc.CallOption) (*UsersResponse, error) {
	out := new(UsersResponse)
	err := c.cc.Invoke(ctx, "/userservice.UserService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	AddUser(context.Context, *User) (*User, error)
	GetUser(context.Context, *Id) (*User, error)
	// rpc UpdateUser(User) returns (User) {}
	GetUsers(context.Context, *ListUsers) (*UsersResponse, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) AddUser(ctx context.Context, req *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedUserServiceServer) GetUser(ctx context.Context, req *Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUserServiceServer) GetUsers(ctx context.Context, req *ListUsers) (*UsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userservice.UserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userservice.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userservice.UserService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*ListUsers))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userservice.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
