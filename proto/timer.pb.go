// Code generated by protoc-gen-go. DO NOT EDIT.
// source: timer.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
type Timer struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Client               string   `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	Project              string   `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
	Tags                 string   `protobuf:"bytes,5,opt,name=tags,proto3" json:"tags,omitempty"`
	TimerStart           string   `protobuf:"bytes,6,opt,name=timerStart,proto3" json:"timerStart,omitempty"`
	TimerEnd             string   `protobuf:"bytes,7,opt,name=timerEnd,proto3" json:"timerEnd,omitempty"`
	ElapsedSeconds       int32    `protobuf:"varint,8,opt,name=elapsedSeconds,proto3" json:"elapsedSeconds,omitempty"`
	IsRunning            bool     `protobuf:"varint,9,opt,name=isRunning,proto3" json:"isRunning,omitempty"`
	IsBilled             bool     `protobuf:"varint,10,opt,name=isBilled,proto3" json:"isBilled,omitempty"`
	Name                 string   `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timer) Reset()         { *m = Timer{} }
func (m *Timer) String() string { return proto.CompactTextString(m) }
func (*Timer) ProtoMessage()    {}
func (*Timer) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0307ee16b652d2, []int{0}
}

func (m *Timer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timer.Unmarshal(m, b)
}
func (m *Timer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timer.Marshal(b, m, deterministic)
}
func (m *Timer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timer.Merge(m, src)
}
func (m *Timer) XXX_Size() int {
	return xxx_messageInfo_Timer.Size(m)
}
func (m *Timer) XXX_DiscardUnknown() {
	xxx_messageInfo_Timer.DiscardUnknown(m)
}

var xxx_messageInfo_Timer proto.InternalMessageInfo

func (m *Timer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Timer) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Timer) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *Timer) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Timer) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *Timer) GetTimerStart() string {
	if m != nil {
		return m.TimerStart
	}
	return ""
}

func (m *Timer) GetTimerEnd() string {
	if m != nil {
		return m.TimerEnd
	}
	return ""
}

func (m *Timer) GetElapsedSeconds() int32 {
	if m != nil {
		return m.ElapsedSeconds
	}
	return 0
}

func (m *Timer) GetIsRunning() bool {
	if m != nil {
		return m.IsRunning
	}
	return false
}

func (m *Timer) GetIsBilled() bool {
	if m != nil {
		return m.IsBilled
	}
	return false
}

func (m *Timer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListTimer struct {
	Jwt                  string   `protobuf:"bytes,1,opt,name=jwt,proto3" json:"jwt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTimer) Reset()         { *m = ListTimer{} }
func (m *ListTimer) String() string { return proto.CompactTextString(m) }
func (*ListTimer) ProtoMessage()    {}
func (*ListTimer) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0307ee16b652d2, []int{1}
}

func (m *ListTimer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTimer.Unmarshal(m, b)
}
func (m *ListTimer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTimer.Marshal(b, m, deterministic)
}
func (m *ListTimer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTimer.Merge(m, src)
}
func (m *ListTimer) XXX_Size() int {
	return xxx_messageInfo_ListTimer.Size(m)
}
func (m *ListTimer) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTimer.DiscardUnknown(m)
}

var xxx_messageInfo_ListTimer proto.InternalMessageInfo

func (m *ListTimer) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type TimerResponse struct {
	Timers               []*Timer `protobuf:"bytes,1,rep,name=Timers,proto3" json:"Timers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimerResponse) Reset()         { *m = TimerResponse{} }
func (m *TimerResponse) String() string { return proto.CompactTextString(m) }
func (*TimerResponse) ProtoMessage()    {}
func (*TimerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0307ee16b652d2, []int{2}
}

func (m *TimerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimerResponse.Unmarshal(m, b)
}
func (m *TimerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimerResponse.Marshal(b, m, deterministic)
}
func (m *TimerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimerResponse.Merge(m, src)
}
func (m *TimerResponse) XXX_Size() int {
	return xxx_messageInfo_TimerResponse.Size(m)
}
func (m *TimerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TimerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TimerResponse proto.InternalMessageInfo

func (m *TimerResponse) GetTimers() []*Timer {
	if m != nil {
		return m.Timers
	}
	return nil
}

func init() {
	proto.RegisterType((*Timer)(nil), "pb.Timer")
	proto.RegisterType((*ListTimer)(nil), "pb.ListTimer")
	proto.RegisterType((*TimerResponse)(nil), "pb.TimerResponse")
}

func init() { proto.RegisterFile("timer.proto", fileDescriptor_ad0307ee16b652d2) }

var fileDescriptor_ad0307ee16b652d2 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xd1, 0x6a, 0xdb, 0x30,
	0x14, 0x86, 0x6b, 0x3b, 0x71, 0xe3, 0x93, 0xb6, 0x74, 0xe7, 0x62, 0x08, 0xb7, 0x1d, 0x9e, 0x2f,
	0x46, 0x2e, 0x86, 0x61, 0xd9, 0x13, 0x34, 0x6c, 0x94, 0xc1, 0x2e, 0x8a, 0xb3, 0x3e, 0x80, 0x63,
	0x1d, 0x8c, 0x8a, 0x22, 0x09, 0x4b, 0xd9, 0xf6, 0x5a, 0x7b, 0xb3, 0x3d, 0xc2, 0x90, 0x9c, 0xc5,
	0xd9, 0x48, 0xef, 0xce, 0xff, 0x7d, 0x07, 0x7c, 0xfc, 0x23, 0x98, 0x3b, 0xb1, 0xa5, 0xbe, 0x32,
	0xbd, 0x76, 0x1a, 0x63, 0xb3, 0xc9, 0x2f, 0x3a, 0xa9, 0x37, 0x8d, 0x1c, 0x48, 0xf9, 0x2b, 0x86,
	0xe9, 0x37, 0xbf, 0x81, 0x57, 0x10, 0x0b, 0xce, 0xa2, 0x22, 0x5a, 0x64, 0x75, 0x2c, 0x38, 0x16,
	0x30, 0xe7, 0x64, 0xdb, 0x5e, 0x18, 0x27, 0xb4, 0x62, 0x71, 0x10, 0xc7, 0x08, 0x5f, 0x43, 0xda,
	0x4a, 0x41, 0xca, 0xb1, 0x24, 0xc8, 0x7d, 0x42, 0x06, 0xe7, 0xa6, 0xd7, 0xcf, 0xd4, 0x3a, 0x36,
	0x09, 0xe2, 0x6f, 0x44, 0x84, 0x89, 0x6b, 0x3a, 0xcb, 0xa6, 0x01, 0x87, 0x19, 0xdf, 0x00, 0x84,
	0x13, 0xd7, 0xae, 0xe9, 0x1d, 0x4b, 0x83, 0x39, 0x22, 0x98, 0xc3, 0x2c, 0xa4, 0xcf, 0x8a, 0xb3,
	0xf3, 0x60, 0x0f, 0x19, 0xdf, 0xc1, 0x15, 0xc9, 0xc6, 0x58, 0xe2, 0x6b, 0x6a, 0xb5, 0xe2, 0x96,
	0xcd, 0x8a, 0x68, 0x31, 0xad, 0xff, 0xa3, 0x78, 0x0b, 0x99, 0xb0, 0xf5, 0x4e, 0x29, 0xa1, 0x3a,
	0x96, 0x15, 0xd1, 0x62, 0x56, 0x8f, 0xc0, 0x7f, 0x41, 0xd8, 0x95, 0x90, 0x92, 0x38, 0x83, 0x20,
	0x0f, 0xd9, 0x5f, 0xac, 0x9a, 0x2d, 0xb1, 0xf9, 0x70, 0xb1, 0x9f, 0xcb, 0x3b, 0xc8, 0xbe, 0x0a,
	0xeb, 0x86, 0xda, 0xae, 0x21, 0x79, 0xfe, 0xe1, 0xf6, 0xbd, 0xf9, 0xb1, 0x5c, 0xc2, 0x65, 0x50,
	0x35, 0x59, 0xa3, 0x95, 0x25, 0x7c, 0x0b, 0x69, 0x00, 0x96, 0x45, 0x45, 0xb2, 0x98, 0x2f, 0xb3,
	0xca, 0x6c, 0xaa, 0x61, 0x65, 0x2f, 0x96, 0xbf, 0x23, 0xb8, 0x08, 0xe3, 0x9a, 0xfa, 0xef, 0xa2,
	0x25, 0xbc, 0x83, 0xe4, 0x9e, 0x73, 0x1c, 0x57, 0xf3, 0x71, 0x2c, 0xcf, 0x30, 0x87, 0xe4, 0x81,
	0x1c, 0xa6, 0x9e, 0x7d, 0xe1, 0xff, 0xba, 0x5b, 0x98, 0x0e, 0xcd, 0x9d, 0xb4, 0x37, 0x30, 0x59,
	0x3b, 0x6d, 0x4e, 0xcb, 0x1c, 0x92, 0x4f, 0x24, 0x4f, 0xbb, 0x02, 0xd2, 0x27, 0xc3, 0x1b, 0x47,
	0x2f, 0x1e, 0xf5, 0x1e, 0xd2, 0x07, 0x72, 0xf7, 0x52, 0xe2, 0xa5, 0xc7, 0x87, 0x8e, 0xf2, 0x57,
	0xe3, 0x0f, 0xef, 0x3b, 0x29, 0xcf, 0x56, 0x1f, 0xe0, 0x46, 0xe8, 0xaa, 0xeb, 0x4d, 0x5b, 0xd1,
	0xcf, 0x66, 0x6b, 0x24, 0xd9, 0xaa, 0xd7, 0x3b, 0x47, 0xdd, 0x4e, 0x70, 0x5a, 0x5d, 0x3f, 0xd9,
	0x43, 0x1b, 0x8f, 0xfe, 0xa9, 0x3e, 0x46, 0x9b, 0x34, 0xbc, 0xd9, 0x8f, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x01, 0x1b, 0x83, 0xc3, 0xd4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TimerServiceClient is the client API for TimerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimerServiceClient interface {
	Add(ctx context.Context, in *Timer, opts ...grpc.CallOption) (*Timer, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Timer, error)
	Start(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Timer, error)
	Stop(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Timer, error)
	Del(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Timer, error)
	Update(ctx context.Context, in *Timer, opts ...grpc.CallOption) (*Timer, error)
	GetAll(ctx context.Context, in *ListTimer, opts ...grpc.CallOption) (*TimerResponse, error)
}

type timerServiceClient struct {
	cc *grpc.ClientConn
}

func NewTimerServiceClient(cc *grpc.ClientConn) TimerServiceClient {
	return &timerServiceClient{cc}
}

func (c *timerServiceClient) Add(ctx context.Context, in *Timer, opts ...grpc.CallOption) (*Timer, error) {
	out := new(Timer)
	err := c.cc.Invoke(ctx, "/pb.TimerService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerServiceClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Timer, error) {
	out := new(Timer)
	err := c.cc.Invoke(ctx, "/pb.TimerService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerServiceClient) Start(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Timer, error) {
	out := new(Timer)
	err := c.cc.Invoke(ctx, "/pb.TimerService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerServiceClient) Stop(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Timer, error) {
	out := new(Timer)
	err := c.cc.Invoke(ctx, "/pb.TimerService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerServiceClient) Del(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Timer, error) {
	out := new(Timer)
	err := c.cc.Invoke(ctx, "/pb.TimerService/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerServiceClient) Update(ctx context.Context, in *Timer, opts ...grpc.CallOption) (*Timer, error) {
	out := new(Timer)
	err := c.cc.Invoke(ctx, "/pb.TimerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerServiceClient) GetAll(ctx context.Context, in *ListTimer, opts ...grpc.CallOption) (*TimerResponse, error) {
	out := new(TimerResponse)
	err := c.cc.Invoke(ctx, "/pb.TimerService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimerServiceServer is the server API for TimerService service.
type TimerServiceServer interface {
	Add(context.Context, *Timer) (*Timer, error)
	Get(context.Context, *Id) (*Timer, error)
	Start(context.Context, *Id) (*Timer, error)
	Stop(context.Context, *Id) (*Timer, error)
	Del(context.Context, *Id) (*Timer, error)
	Update(context.Context, *Timer) (*Timer, error)
	GetAll(context.Context, *ListTimer) (*TimerResponse, error)
}

// UnimplementedTimerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTimerServiceServer struct {
}

func (*UnimplementedTimerServiceServer) Add(ctx context.Context, req *Timer) (*Timer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedTimerServiceServer) Get(ctx context.Context, req *Id) (*Timer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedTimerServiceServer) Start(ctx context.Context, req *Id) (*Timer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedTimerServiceServer) Stop(ctx context.Context, req *Id) (*Timer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedTimerServiceServer) Del(ctx context.Context, req *Id) (*Timer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (*UnimplementedTimerServiceServer) Update(ctx context.Context, req *Timer) (*Timer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedTimerServiceServer) GetAll(ctx context.Context, req *ListTimer) (*TimerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}

func RegisterTimerServiceServer(s *grpc.Server, srv TimerServiceServer) {
	s.RegisterService(&_TimerService_serviceDesc, srv)
}

func _TimerService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TimerService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).Add(ctx, req.(*Timer))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TimerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimerService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TimerService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).Start(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimerService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TimerService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).Stop(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimerService_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TimerService/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).Del(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TimerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).Update(ctx, req.(*Timer))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimerService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTimer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TimerService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).GetAll(ctx, req.(*ListTimer))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TimerService",
	HandlerType: (*TimerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _TimerService_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TimerService_Get_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _TimerService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _TimerService_Stop_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _TimerService_Del_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TimerService_Update_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _TimerService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timer.proto",
}
