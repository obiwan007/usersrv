// Code generated by protoc-gen-go. DO NOT EDIT.
// source: project.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Project struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Client               string   `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	Tags                 string   `protobuf:"bytes,5,opt,name=tags,proto3" json:"tags,omitempty"`
	Status               string   `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Team                 string   `protobuf:"bytes,11,opt,name=team,proto3" json:"team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{0}
}

func (m *Project) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Project.Unmarshal(m, b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Project.Marshal(b, m, deterministic)
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return xxx_messageInfo_Project.Size(m)
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Project) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Project) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *Project) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *Project) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Project) GetTeam() string {
	if m != nil {
		return m.Team
	}
	return ""
}

type ListProject struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListProject) Reset()         { *m = ListProject{} }
func (m *ListProject) String() string { return proto.CompactTextString(m) }
func (*ListProject) ProtoMessage()    {}
func (*ListProject) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{1}
}

func (m *ListProject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProject.Unmarshal(m, b)
}
func (m *ListProject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProject.Marshal(b, m, deterministic)
}
func (m *ListProject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProject.Merge(m, src)
}
func (m *ListProject) XXX_Size() int {
	return xxx_messageInfo_ListProject.Size(m)
}
func (m *ListProject) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProject.DiscardUnknown(m)
}

var xxx_messageInfo_ListProject proto.InternalMessageInfo

type ProjectResponse struct {
	Projects             []*Project `protobuf:"bytes,1,rep,name=Projects,proto3" json:"Projects,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProjectResponse) Reset()         { *m = ProjectResponse{} }
func (m *ProjectResponse) String() string { return proto.CompactTextString(m) }
func (*ProjectResponse) ProtoMessage()    {}
func (*ProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{2}
}

func (m *ProjectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectResponse.Unmarshal(m, b)
}
func (m *ProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectResponse.Marshal(b, m, deterministic)
}
func (m *ProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectResponse.Merge(m, src)
}
func (m *ProjectResponse) XXX_Size() int {
	return xxx_messageInfo_ProjectResponse.Size(m)
}
func (m *ProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectResponse proto.InternalMessageInfo

func (m *ProjectResponse) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

func init() {
	proto.RegisterType((*Project)(nil), "pb.Project")
	proto.RegisterType((*ListProject)(nil), "pb.ListProject")
	proto.RegisterType((*ProjectResponse)(nil), "pb.ProjectResponse")
}

func init() { proto.RegisterFile("project.proto", fileDescriptor_8340e6318dfdfac2) }

var fileDescriptor_8340e6318dfdfac2 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xd1, 0x4a, 0xfb, 0x30,
	0x14, 0xc6, 0xd7, 0xf6, 0xff, 0xaf, 0x7a, 0xea, 0x36, 0x89, 0x20, 0x61, 0x7a, 0x31, 0x8b, 0xe0,
	0xae, 0x8a, 0xce, 0x3b, 0xef, 0x36, 0x84, 0x21, 0x78, 0x31, 0x26, 0x7b, 0x80, 0xb4, 0x39, 0x94,
	0x48, 0xb6, 0x84, 0x24, 0x15, 0xdf, 0xc3, 0x87, 0xf2, 0xb5, 0xa4, 0x69, 0x94, 0x5e, 0xa8, 0x77,
	0xe7, 0xfb, 0xbe, 0x5f, 0xc8, 0xf9, 0x38, 0x30, 0xd4, 0x46, 0xbd, 0x60, 0xe5, 0x0a, 0x6d, 0x94,
	0x53, 0x24, 0xd6, 0xe5, 0xe4, 0xb8, 0x96, 0xaa, 0x64, 0xb2, 0x73, 0xf2, 0xf7, 0x08, 0x0e, 0xd6,
	0x1d, 0x43, 0x46, 0x10, 0x0b, 0x4e, 0xa3, 0x69, 0x34, 0x3b, 0xda, 0xc4, 0x82, 0x93, 0x29, 0x64,
	0x1c, 0x6d, 0x65, 0x84, 0x76, 0x42, 0xed, 0x69, 0xec, 0x83, 0xbe, 0x45, 0xce, 0x20, 0xad, 0xa4,
	0xc0, 0xbd, 0xa3, 0x89, 0x0f, 0x83, 0x22, 0x04, 0xfe, 0x39, 0x56, 0x5b, 0xfa, 0xdf, 0xbb, 0x7e,
	0x6e, 0x59, 0xeb, 0x98, 0x6b, 0x2c, 0x4d, 0x3b, 0xb6, 0x53, 0x9e, 0x45, 0xb6, 0xa3, 0x59, 0x60,
	0x91, 0xed, 0xf2, 0x21, 0x64, 0x4f, 0xc2, 0xba, 0xb0, 0x58, 0x7e, 0x0f, 0xe3, 0x30, 0x6e, 0xd0,
	0x6a, 0xb5, 0xb7, 0x48, 0xae, 0xe1, 0x30, 0x58, 0x96, 0x46, 0xd3, 0x64, 0x96, 0xcd, 0xb3, 0x42,
	0x97, 0xc5, 0x17, 0xf6, 0x1d, 0xce, 0x3f, 0x22, 0x18, 0x05, 0xf1, 0x8c, 0xe6, 0x55, 0x54, 0x48,
	0x2e, 0x21, 0x59, 0x70, 0x4e, 0xfa, 0x0f, 0x26, 0x7d, 0x91, 0x0f, 0xc8, 0x05, 0x24, 0x2b, 0x74,
	0x24, 0x6d, 0xdd, 0x47, 0xfe, 0x43, 0xfa, 0x80, 0xf2, 0xb7, 0xf4, 0x0a, 0xd2, 0xad, 0xe6, 0xcc,
	0xe1, 0x9f, 0x3f, 0xdc, 0x40, 0xba, 0x42, 0xb7, 0x90, 0x92, 0x8c, 0xdb, 0xa0, 0x57, 0x77, 0x72,
	0xda, 0x6f, 0x12, 0x0a, 0xe7, 0x83, 0xe5, 0x2d, 0x9c, 0x0b, 0x55, 0xd4, 0x46, 0x57, 0x05, 0xbe,
	0xb1, 0x9d, 0x96, 0x68, 0x0b, 0xa3, 0x1a, 0x87, 0x75, 0x23, 0x38, 0x2e, 0x4f, 0xb6, 0x16, 0x4d,
	0xa8, 0xb8, 0x6e, 0x6f, 0xbb, 0x8e, 0xca, 0xd4, 0x1f, 0xf9, 0xee, 0x33, 0x00, 0x00, 0xff, 0xff,
	0x33, 0xd0, 0xed, 0xca, 0x07, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProjectServiceClient interface {
	Add(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Project, error)
	Del(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Project, error)
	Update(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error)
	GetAll(ctx context.Context, in *ListProject, opts ...grpc.CallOption) (*ProjectResponse, error)
}

type projectServiceClient struct {
	cc *grpc.ClientConn
}

func NewProjectServiceClient(cc *grpc.ClientConn) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) Add(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/pb.ProjectService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/pb.ProjectService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) Del(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/pb.ProjectService/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) Update(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/pb.ProjectService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetAll(ctx context.Context, in *ListProject, opts ...grpc.CallOption) (*ProjectResponse, error) {
	out := new(ProjectResponse)
	err := c.cc.Invoke(ctx, "/pb.ProjectService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
type ProjectServiceServer interface {
	Add(context.Context, *Project) (*Project, error)
	Get(context.Context, *Id) (*Project, error)
	Del(context.Context, *Id) (*Project, error)
	Update(context.Context, *Project) (*Project, error)
	GetAll(context.Context, *ListProject) (*ProjectResponse, error)
}

// UnimplementedProjectServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (*UnimplementedProjectServiceServer) Add(ctx context.Context, req *Project) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedProjectServiceServer) Get(ctx context.Context, req *Id) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedProjectServiceServer) Del(ctx context.Context, req *Id) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (*UnimplementedProjectServiceServer) Update(ctx context.Context, req *Project) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedProjectServiceServer) GetAll(ctx context.Context, req *ListProject) (*ProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}

func RegisterProjectServiceServer(s *grpc.Server, srv ProjectServiceServer) {
	s.RegisterService(&_ProjectService_serviceDesc, srv)
}

func _ProjectService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProjectService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Add(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProjectService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProjectService/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Del(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProjectService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Update(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProjectService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetAll(ctx, req.(*ListProject))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ProjectService_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ProjectService_Get_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _ProjectService_Del_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProjectService_Update_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ProjectService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project.proto",
}
