// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/obiwan007/usersrv/projectsrv/api/storage/ent/predicate"
	"github.com/obiwan007/usersrv/projectsrv/api/storage/ent/project"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks      []Hook
	mutation   *ProjectMutation
	predicates []predicate.Project
}

// Where adds a new predicate for the builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetDescription sets the description field.
func (pu *ProjectUpdate) SetDescription(s string) *ProjectUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the description field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDescription(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// SetName sets the name field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the name field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableName(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetClientid sets the clientid field.
func (pu *ProjectUpdate) SetClientid(s string) *ProjectUpdate {
	pu.mutation.SetClientid(s)
	return pu
}

// SetNillableClientid sets the clientid field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableClientid(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetClientid(*s)
	}
	return pu
}

// ClearClientid clears the value of clientid.
func (pu *ProjectUpdate) ClearClientid() *ProjectUpdate {
	pu.mutation.ClearClientid()
	return pu
}

// SetUserid sets the userid field.
func (pu *ProjectUpdate) SetUserid(s string) *ProjectUpdate {
	pu.mutation.SetUserid(s)
	return pu
}

// SetNillableUserid sets the userid field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUserid(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetUserid(*s)
	}
	return pu
}

// ClearUserid clears the value of userid.
func (pu *ProjectUpdate) ClearUserid() *ProjectUpdate {
	pu.mutation.ClearUserid()
	return pu
}

// SetMandantid sets the mandantid field.
func (pu *ProjectUpdate) SetMandantid(s string) *ProjectUpdate {
	pu.mutation.SetMandantid(s)
	return pu
}

// SetNillableMandantid sets the mandantid field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableMandantid(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetMandantid(*s)
	}
	return pu
}

// ClearMandantid clears the value of mandantid.
func (pu *ProjectUpdate) ClearMandantid() *ProjectUpdate {
	pu.mutation.ClearMandantid()
	return pu
}

// SetStatus sets the status field.
func (pu *ProjectUpdate) SetStatus(s string) *ProjectUpdate {
	pu.mutation.SetStatus(s)
	return pu
}

// SetNillableStatus sets the status field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableStatus(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetStatus(*s)
	}
	return pu
}

// ClearStatus clears the value of status.
func (pu *ProjectUpdate) ClearStatus() *ProjectUpdate {
	pu.mutation.ClearStatus()
	return pu
}

// SetTags sets the tags field.
func (pu *ProjectUpdate) SetTags(s string) *ProjectUpdate {
	pu.mutation.SetTags(s)
	return pu
}

// SetNillableTags sets the tags field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableTags(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetTags(*s)
	}
	return pu
}

// ClearTags clears the value of tags.
func (pu *ProjectUpdate) ClearTags() *ProjectUpdate {
	pu.mutation.ClearTags()
	return pu
}

// SetTeam sets the team field.
func (pu *ProjectUpdate) SetTeam(s string) *ProjectUpdate {
	pu.mutation.SetTeam(s)
	return pu
}

// SetNillableTeam sets the team field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableTeam(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetTeam(*s)
	}
	return pu
}

// ClearTeam clears the value of team.
func (pu *ProjectUpdate) ClearTeam() *ProjectUpdate {
	pu.mutation.ClearTeam()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   project.Table,
			Columns: project.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: project.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldDescription,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldName,
		})
	}
	if value, ok := pu.mutation.Clientid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldClientid,
		})
	}
	if pu.mutation.ClientidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: project.FieldClientid,
		})
	}
	if value, ok := pu.mutation.Userid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldUserid,
		})
	}
	if pu.mutation.UseridCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: project.FieldUserid,
		})
	}
	if value, ok := pu.mutation.Mandantid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldMandantid,
		})
	}
	if pu.mutation.MandantidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: project.FieldMandantid,
		})
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldStatus,
		})
	}
	if pu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: project.FieldStatus,
		})
	}
	if value, ok := pu.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldTags,
		})
	}
	if pu.mutation.TagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: project.FieldTags,
		})
	}
	if value, ok := pu.mutation.Team(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldTeam,
		})
	}
	if pu.mutation.TeamCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: project.FieldTeam,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// SetDescription sets the description field.
func (puo *ProjectUpdateOne) SetDescription(s string) *ProjectUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the description field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDescription(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// SetName sets the name field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the name field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableName(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetClientid sets the clientid field.
func (puo *ProjectUpdateOne) SetClientid(s string) *ProjectUpdateOne {
	puo.mutation.SetClientid(s)
	return puo
}

// SetNillableClientid sets the clientid field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableClientid(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetClientid(*s)
	}
	return puo
}

// ClearClientid clears the value of clientid.
func (puo *ProjectUpdateOne) ClearClientid() *ProjectUpdateOne {
	puo.mutation.ClearClientid()
	return puo
}

// SetUserid sets the userid field.
func (puo *ProjectUpdateOne) SetUserid(s string) *ProjectUpdateOne {
	puo.mutation.SetUserid(s)
	return puo
}

// SetNillableUserid sets the userid field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUserid(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetUserid(*s)
	}
	return puo
}

// ClearUserid clears the value of userid.
func (puo *ProjectUpdateOne) ClearUserid() *ProjectUpdateOne {
	puo.mutation.ClearUserid()
	return puo
}

// SetMandantid sets the mandantid field.
func (puo *ProjectUpdateOne) SetMandantid(s string) *ProjectUpdateOne {
	puo.mutation.SetMandantid(s)
	return puo
}

// SetNillableMandantid sets the mandantid field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableMandantid(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetMandantid(*s)
	}
	return puo
}

// ClearMandantid clears the value of mandantid.
func (puo *ProjectUpdateOne) ClearMandantid() *ProjectUpdateOne {
	puo.mutation.ClearMandantid()
	return puo
}

// SetStatus sets the status field.
func (puo *ProjectUpdateOne) SetStatus(s string) *ProjectUpdateOne {
	puo.mutation.SetStatus(s)
	return puo
}

// SetNillableStatus sets the status field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableStatus(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetStatus(*s)
	}
	return puo
}

// ClearStatus clears the value of status.
func (puo *ProjectUpdateOne) ClearStatus() *ProjectUpdateOne {
	puo.mutation.ClearStatus()
	return puo
}

// SetTags sets the tags field.
func (puo *ProjectUpdateOne) SetTags(s string) *ProjectUpdateOne {
	puo.mutation.SetTags(s)
	return puo
}

// SetNillableTags sets the tags field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableTags(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetTags(*s)
	}
	return puo
}

// ClearTags clears the value of tags.
func (puo *ProjectUpdateOne) ClearTags() *ProjectUpdateOne {
	puo.mutation.ClearTags()
	return puo
}

// SetTeam sets the team field.
func (puo *ProjectUpdateOne) SetTeam(s string) *ProjectUpdateOne {
	puo.mutation.SetTeam(s)
	return puo
}

// SetNillableTeam sets the team field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableTeam(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetTeam(*s)
	}
	return puo
}

// ClearTeam clears the value of team.
func (puo *ProjectUpdateOne) ClearTeam() *ProjectUpdateOne {
	puo.mutation.ClearTeam()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	var (
		err  error
		node *Project
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	pr, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pr
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (pr *Project, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   project.Table,
			Columns: project.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: project.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Project.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldDescription,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldName,
		})
	}
	if value, ok := puo.mutation.Clientid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldClientid,
		})
	}
	if puo.mutation.ClientidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: project.FieldClientid,
		})
	}
	if value, ok := puo.mutation.Userid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldUserid,
		})
	}
	if puo.mutation.UseridCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: project.FieldUserid,
		})
	}
	if value, ok := puo.mutation.Mandantid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldMandantid,
		})
	}
	if puo.mutation.MandantidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: project.FieldMandantid,
		})
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldStatus,
		})
	}
	if puo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: project.FieldStatus,
		})
	}
	if value, ok := puo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldTags,
		})
	}
	if puo.mutation.TagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: project.FieldTags,
		})
	}
	if value, ok := puo.mutation.Team(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldTeam,
		})
	}
	if puo.mutation.TeamCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: project.FieldTeam,
		})
	}
	pr = &Project{config: puo.config}
	_spec.Assign = pr.assignValues
	_spec.ScanValues = pr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pr, nil
}
