// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/obiwan007/usersrv/projectsrv/api/storage/ent/project"
)

// ProjectCreate is the builder for creating a Project entity.
type ProjectCreate struct {
	config
	mutation *ProjectMutation
	hooks    []Hook
}

// SetDescription sets the description field.
func (pc *ProjectCreate) SetDescription(s string) *ProjectCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the description field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDescription(s *string) *ProjectCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetName sets the name field.
func (pc *ProjectCreate) SetName(s string) *ProjectCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the name field if the given value is not nil.
func (pc *ProjectCreate) SetNillableName(s *string) *ProjectCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetClientid sets the clientid field.
func (pc *ProjectCreate) SetClientid(s string) *ProjectCreate {
	pc.mutation.SetClientid(s)
	return pc
}

// SetNillableClientid sets the clientid field if the given value is not nil.
func (pc *ProjectCreate) SetNillableClientid(s *string) *ProjectCreate {
	if s != nil {
		pc.SetClientid(*s)
	}
	return pc
}

// SetUserid sets the userid field.
func (pc *ProjectCreate) SetUserid(s string) *ProjectCreate {
	pc.mutation.SetUserid(s)
	return pc
}

// SetNillableUserid sets the userid field if the given value is not nil.
func (pc *ProjectCreate) SetNillableUserid(s *string) *ProjectCreate {
	if s != nil {
		pc.SetUserid(*s)
	}
	return pc
}

// SetMandantid sets the mandantid field.
func (pc *ProjectCreate) SetMandantid(s string) *ProjectCreate {
	pc.mutation.SetMandantid(s)
	return pc
}

// SetNillableMandantid sets the mandantid field if the given value is not nil.
func (pc *ProjectCreate) SetNillableMandantid(s *string) *ProjectCreate {
	if s != nil {
		pc.SetMandantid(*s)
	}
	return pc
}

// SetStatus sets the status field.
func (pc *ProjectCreate) SetStatus(s string) *ProjectCreate {
	pc.mutation.SetStatus(s)
	return pc
}

// SetNillableStatus sets the status field if the given value is not nil.
func (pc *ProjectCreate) SetNillableStatus(s *string) *ProjectCreate {
	if s != nil {
		pc.SetStatus(*s)
	}
	return pc
}

// SetTags sets the tags field.
func (pc *ProjectCreate) SetTags(s string) *ProjectCreate {
	pc.mutation.SetTags(s)
	return pc
}

// SetNillableTags sets the tags field if the given value is not nil.
func (pc *ProjectCreate) SetNillableTags(s *string) *ProjectCreate {
	if s != nil {
		pc.SetTags(*s)
	}
	return pc
}

// SetTeam sets the team field.
func (pc *ProjectCreate) SetTeam(s string) *ProjectCreate {
	pc.mutation.SetTeam(s)
	return pc
}

// SetNillableTeam sets the team field if the given value is not nil.
func (pc *ProjectCreate) SetNillableTeam(s *string) *ProjectCreate {
	if s != nil {
		pc.SetTeam(*s)
	}
	return pc
}

// Save creates the Project in the database.
func (pc *ProjectCreate) Save(ctx context.Context) (*Project, error) {
	if _, ok := pc.mutation.Description(); !ok {
		v := project.DefaultDescription
		pc.mutation.SetDescription(v)
	}
	if _, ok := pc.mutation.Name(); !ok {
		v := project.DefaultName
		pc.mutation.SetName(v)
	}
	if _, ok := pc.mutation.Clientid(); !ok {
		v := project.DefaultClientid
		pc.mutation.SetClientid(v)
	}
	if _, ok := pc.mutation.Userid(); !ok {
		v := project.DefaultUserid
		pc.mutation.SetUserid(v)
	}
	if _, ok := pc.mutation.Mandantid(); !ok {
		v := project.DefaultMandantid
		pc.mutation.SetMandantid(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := project.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.Tags(); !ok {
		v := project.DefaultTags
		pc.mutation.SetTags(v)
	}
	if _, ok := pc.mutation.Team(); !ok {
		v := project.DefaultTeam
		pc.mutation.SetTeam(v)
	}
	var (
		err  error
		node *Project
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProjectCreate) SaveX(ctx context.Context) *Project {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *ProjectCreate) sqlSave(ctx context.Context) (*Project, error) {
	var (
		pr    = &Project{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: project.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: project.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldDescription,
		})
		pr.Description = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldName,
		})
		pr.Name = value
	}
	if value, ok := pc.mutation.Clientid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldClientid,
		})
		pr.Clientid = value
	}
	if value, ok := pc.mutation.Userid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldUserid,
		})
		pr.Userid = value
	}
	if value, ok := pc.mutation.Mandantid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldMandantid,
		})
		pr.Mandantid = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldStatus,
		})
		pr.Status = value
	}
	if value, ok := pc.mutation.Tags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldTags,
		})
		pr.Tags = value
	}
	if value, ok := pc.mutation.Team(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldTeam,
		})
		pr.Team = value
	}
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}
