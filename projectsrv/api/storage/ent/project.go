// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/obiwan007/usersrv/projectsrv/api/storage/ent/project"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Clientid holds the value of the "clientid" field.
	Clientid string `json:"clientid,omitempty"`
	// Userid holds the value of the "userid" field.
	Userid string `json:"userid,omitempty"`
	// Mandantid holds the value of the "mandantid" field.
	Mandantid string `json:"mandantid,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags string `json:"tags,omitempty"`
	// Team holds the value of the "team" field.
	Team string `json:"team,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // description
		&sql.NullString{}, // name
		&sql.NullString{}, // clientid
		&sql.NullString{}, // userid
		&sql.NullString{}, // mandantid
		&sql.NullString{}, // status
		&sql.NullString{}, // tags
		&sql.NullString{}, // team
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(values ...interface{}) error {
	if m, n := len(values), len(project.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[0])
	} else if value.Valid {
		pr.Description = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[1])
	} else if value.Valid {
		pr.Name = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field clientid", values[2])
	} else if value.Valid {
		pr.Clientid = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userid", values[3])
	} else if value.Valid {
		pr.Userid = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field mandantid", values[4])
	} else if value.Valid {
		pr.Mandantid = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[5])
	} else if value.Valid {
		pr.Status = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tags", values[6])
	} else if value.Valid {
		pr.Tags = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field team", values[7])
	} else if value.Valid {
		pr.Team = value.String
	}
	return nil
}

// Update returns a builder for updating this Project.
// Note that, you need to call Project.Unwrap() before calling this method, if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return (&ProjectClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", clientid=")
	builder.WriteString(pr.Clientid)
	builder.WriteString(", userid=")
	builder.WriteString(pr.Userid)
	builder.WriteString(", mandantid=")
	builder.WriteString(pr.Mandantid)
	builder.WriteString(", status=")
	builder.WriteString(pr.Status)
	builder.WriteString(", tags=")
	builder.WriteString(pr.Tags)
	builder.WriteString(", team=")
	builder.WriteString(pr.Team)
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project

func (pr Projects) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
